package list;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main4 {
	public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        //입력 연산 
        int arr[][] = new int[n][m];
        for(int i = 0; i < n; i++) {
        	st = new StringTokenizer(br.readLine());
        	for(int j = 0; j<m; j++) {
        		arr[i][j] = Integer.parseInt(st.nextToken());
        	}
        }
        
        //상하좌우
        int dc[] = {-1, 1, 0, 0 };
        int dr[] = {0, 0, -1, 1};
        
        int d = 0;
        int r, c = 0;
        while(true) {
        	for(int i = 0; i < n; i++) {
            	for(int j = 0; j<m; j++) {
        	//1인 곳부터 시작 그러나 상하좌우가 1이면 안된다 
        		if(arr[i][j] == 1 && arr[i+1][j] != 1 && arr[i][j+1]!= 1) {
        			//그 좌표를 0으로 초기화 
        			i = 0;
        			j = 0;
        			
        			int nc = i + dc[d];
        			int nr = j + dr[d];
        			if(nc < 0 || nc >=  n || nr < 0 || nr <= m || arr[nc][nr] == 1) {
        				d = (d+1)%2;
        				break;
        			}
        			
        			//다리의 길이
        			int leng = nc - i;
        	}
        		
        }
        	}
        	}
        
        //섬이 다 연결되었는지 확인
        
        //섬 연결 불가능이면 -1 \
        
	
}
	private static boolean isConnected(arr[][]) {
		
	}
}
