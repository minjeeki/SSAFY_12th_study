package solu;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main4 {
	
	static class Node implements Comparable<Node>{
		int x;
		int y;
		int rupi;
		
		public Node(int x, int y, int rupi) {
			this.x = x;
			this.y = y;
			this.rupi = rupi;
		}
		
		@Override
		public int compareTo(Node o) {
			// TODO Auto-generated method stub
			return this.rupi - o.rupi;
		}
	}
	
	static int n;
	static int arr[][];
	static int dr []= {-1, 0, 1, 0};//북동남서
	static int dc []= {0, 1, 0, -1};
	static final int INF = Integer.MAX_VALUE;
	
	static StringBuilder sb = new StringBuilder();
	public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int idx = 1;
        while(true) {
	        n = Integer.parseInt(br.readLine());
	        if(n == 0) {break;
	        }
	        arr = new int[n][n];
	        
	        for(int i = 0; i< n; i++) {
	        	StringTokenizer st = new StringTokenizer(br.readLine());
	        	for(int j = 0; j < n; j++) {
	        		arr[i][j] = Integer.parseInt(st.nextToken());
	        	}
	        }
	        
	        
	        int rupi = bfs();
	        sb.append("Problem "+ idx+ ": "+rupi+"\n");
	        idx++; //tc 1증가
	        //입력끝
	        
        }System.out.println(sb);
	}
	static int bfs() {
		Queue<Node> qu = new PriorityQueue<>();
		int [][] ary = new int[n][n];
		for(int i = 0; i < n; i++) {
			Arrays.fill(ary[i], INF);
		}
		
		qu.add(new Node(0, 0, arr[0][0]));
		ary[0][0] = arr[0][0];
		
		while(!qu.isEmpty()) {
			Node no = qu.poll();
			int c = no.x, r = no.y;
			int rupi = no.rupi;
			//가장 빠르게 도착한거 리턴
			if(c == n-1 && r == n-1) {
				return rupi;
			}
			
			for(int i = 0; i <4; i++) {
				int nc = c+dc[i];
				int nr = r+dr[i];
				//경계조건
				if(nc<0 || nc>n-1 || nr<0 || nr>n-1)continue;
				//갱신
				if(rupi+arr[nc][nr] < ary[nc][nr]) {
					ary[nc][nr] = rupi+arr[nc][nr];
					qu.add(new Node(nc,nr,rupi+arr[nc][nr]));
				}
			}
		}
		return -1;
	}
}
