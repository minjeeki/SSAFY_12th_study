package defaultnot;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main1 {
	static int arr[][];
	static boolean visit[][];
	//대각선도 포함이므로 
	static int dr[] = {0, 0, -1, 1, -1, 1, -1, 1};
	static int dc[] = {-1, 1, 0, 0, 1, 1, -1, -1};
	static int w, h, nr, nc;
	
	static class Node{
		int x;
		int y;
		
		public Node(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}
	
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st;
		
		String str = " ";
		while( !(str = br.readLine()).equals("0 0")) {
			
			st = new StringTokenizer(str);
			w = Integer.parseInt(st.nextToken());
			h = Integer.parseInt(st.nextToken());
			arr = new int [h][w]; //반대임
			visit = new boolean [h][w]; //반대임
			
			//입력 연산
			for(int i = 0; i < h; i++) {
				st = new StringTokenizer(br.readLine());
				for(int j = 0; j < w; j++) {
					arr[i][j] = Integer.parseInt(st.nextToken());
				}
			}
			
			int is_count = 0;
			//1인 지점 탐색, 그 지점부터 탐색 시작 
			for(int i = 0; i < h; i++) {
				for(int j = 0; j < w; j++) {
					//방문하지 않았고, 1이면 섬이므로 탐색 시작
					if(!visit[i][j] && arr[i][j] == 1) {
						BFS(i, j);
						is_count++;
					}
				}
			}
			System.out.println(is_count);
			
		}
		
		
		
	}
	
	static void BFS(int x, int y) {
		Queue<Node> qu = new LinkedList<>();
		visit[x][y] = true;
		qu.offer(new Node(x, y));
		//빌 때까지
		while(!qu.isEmpty()) {
			Node node = qu.poll();
			
			for(int i = 0; i < 8; i++) {
				nr = dr[i] + node.x;
				nc = dc[i] + node.y;
				
				if(nr >=0 && nc >= 0&& nr < h && nc < w && !visit[nr][nc] && arr[nr][nc] == 1 ) {
					visit[nr][nc] = true;
					qu.offer(new Node(nr, nc));
				}
			}
		}
	}
	
}
