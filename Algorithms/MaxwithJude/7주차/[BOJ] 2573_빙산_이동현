import java.util.*;
import java.io.*;

//얼음 객체 생성 
class Node {
    int x, y;
    Node (int x, int y) {
        this.x = x;
        this.y = y;
    }
}

public class Main {
    static int[][] arr;
    static int N, M, island, islandCnt;
    static int[] dx = { -1, 1, 0, 0 }; //상하좌우 
    static int[] dy = { 0, 0, 1, -1 };
    static boolean[][] visited;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        arr = new int[N][M];

        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < M; j++) {
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        int year = 0;
        island = 1;
        while (island != 0) {
            BFS();
            visited = new boolean[N][M];
            island = 0;
            islandCnt = 0;
            for (int i = 0; i < N; i++) // 빙산 카운팅.
                for (int j = 0; j < M; j++) {
                    if (!visited[i][j] && arr[i][j] != 0) {
                        islandCnt(i, j);
                    }
                }
            year++;
            island = islandCnt;
            if (island >= 2) {
                break;
            }
        }
        System.out.println(island > 1 ? year : 0);
    }
    //인접바다를 찾고 그만큼 녹여주는 메서드 
    public static void BFS() {
        Queue<Node> q = new LinkedList<>();
        visited = new boolean[N][M];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
            	//0이 아니면 인접바다를 찾을 큐에 넣기 
                if (arr[i][j] != 0) {
                    q.add(new Node(i, j)); // 빙산 추가.
                }
            }
        }
        
        while(!q.isEmpty()) {
            Node n = q.poll();
            int cnt = 0;
            for (int i = 0; i < 4; i++) {
                int nx = n.x + dx[i];
                int ny = n.y + dy[i];
                if (arr[nx][ny] != 0)
                    continue;
                if (arr[nx][ny] == 0 && !visited[nx][ny]) {
                    cnt++; // 빙산 주변 0 카운팅.
                }
            }
            visited[n.x][n.y] = true;
            if (arr[n.x][n.y] < cnt) {
                arr[n.x][n.y] = 0; // 음수면 0으로 초기화.
            } else
                arr[n.x][n.y] -= cnt;
        }

    }
    // 얼음섬 개수 세는 메서드 
    public static void islandCnt(int x, int y) {
        Queue<Node> q = new LinkedList<>();
        q.add(new Node(x, y));
        
        while(!q.isEmpty()) {
            Node n = q.poll();
            visited[n.x][n.y] = true;
            for (int i = 0; i < 4; i++) {
                int nx = n.x + dx[i];
                int ny = n.y + dy[i];
                if (nx < 0 || ny < 0 || nx >= N || ny >= M)
                    continue;
                if (arr[nx][ny] == 0)
                    continue;
                if (visited[nx][ny])
                    continue;

                visited[nx][ny] = true;
                q.add(new Node(nx, ny));
            }
        }
        islandCnt++;
    }

}
